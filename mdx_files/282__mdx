https://code.kx.com/phrases/indexes/

# Indexes - Q Phrasebook

Original URL: https://code.kx.com/phrases/indexes/

[ ](https://github.com/kxcontrib/phrases/edit/master/docs/indexes.md "Edit
this page")

# Indexes

## Vector

### All indexes of vector x

    
    
    q)show x:10?.Q.a
    "uwgbyfenjc"
    q)tc x
    0 1 2 3 4 5 6 7 8 9
    

### Y-wide sublists of x

    
    
    q)til[y]+/:til count[x]-y-1
    0 1 2
    1 2 3
    2 3 4
    3 4 5
    

### Sublists of length y, starting at x

    
    
    q)x:10
    q)y:3
    q)x+til y
    10 11 12
    
    q)x:4+til 5
    q)y:3
    q)x+\:til y
    4 5 6
    5 6 7
    6 7 8
    7 8 9
    8 9 10
    
    q)x:10 20 30
    q)y:3 4 2
    q)raze x+til each y
    10 11 12 20 21 22 23 30 31
    

## Matrix

### All pairs of `til[x]` and `til[y]`

    
    
    q)x:3
    q)y:4
    q)(x,y) vs til x*y
    0 0 0 0 1 1 1 1 2 2 2 2
    0 1 2 3 0 1 2 3 0 1 2 3
    
    q)flip raze til[x],/:\: til y
    0 0 0 0 1 1 1 1 2 2 2 2
    0 1 2 3 0 1 2 3 0 1 2 3
    
    q)flip til[x] cross til y
    0 0 0 0 1 1 1 1 2 2 2 2
    0 1 2 3 0 1 2 3 0 1 2 3
    

## Any rank

### Indexes of an array

The [_depth_](/q/basics/glossary/#depth) of a list is the number of nesting
levels at which it is rectangular. Its _shape_ is a vector of its count at
each level at which it is rectangular, and corresponds to the left argument of
[Take](/q/ref/take/).

    
    
    q)depth:{$[type[x]<0; 0; "j"$sum(and)scan 1b,-1_{1=count distinct count each x}each(raze\)x]}
    q)shape:{$[0=d:depth x; 0#0j; d#{first(raze/)x}each(d{each[x;]}\count)@\:x]}
    q)ix:('[{x vs til prd x};shape])
    q)ix til 6
    0 1 2 3 4 5
    q)ix 2 3#til 6
    0 0 0 1 1 1
    0 1 2 0 1 2
    q)ix 2 3 2#til 12
    0 0 0 0 0 0 1 1 1 1 1 1
    0 0 1 1 2 2 0 0 1 1 2 2
    0 1 0 1 0 1 0 1 0 1 0 1
    

### Scattered indexing

    
    
    q)show x:2 3 4#.Q.a
    "abcd" "efgh" "ijkl"
    "mnop" "qrst" "uvwx"
    q)x ./:(0 0 0;1 1 3;1 2 2)
    "atw"
    

### Raveled index from general index

    
    
    q)x:2 3 4#.Q.a
    q)x[1;1;3]
    "t"
    q)shape x
    2 3 4
    q)2 3 4 sv 1 1 3                / raveled index
    19
    q)raze over x                   / raveled array
    "abcdefghijklmnopqrstuvwx"
    q)(raze over x) 19
    "t"
    

### Index an arbitrary-rank array

    
    
    q)x:2 3 4 5#til 120
    q)x[1]
    60 61 62 63 64      65 66 67 68 69      70 71 72 73 74      75 76 77 78 79
    80 81 82 83 84      85 86 87 88 89      90 91 92 93 94      95 96 97 98 99
    100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119
    q)x . enlist 1
    60 61 62 63 64      65 66 67 68 69      70 71 72 73 74      75 76 77 78 79
    80 81 82 83 84      85 86 87 88 89      90 91 92 93 94      95 96 97 98 99
    100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119
    q)x . 0 0
    0  1  2  3  4
    5  6  7  8  9
    10 11 12 13 14
    15 16 17 18 19
    q)x . 0 0 0
    0 1 2 3 4
    q)x . 0 0 0 0
    0
    q)x[0;0;0;0]
    0
    

