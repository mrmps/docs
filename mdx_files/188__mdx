https://code.kx.com/dashboards/style/

# Style - KX Dashboards

Original URL: https://code.kx.com/dashboards/style/

# Style

## Dashboard style

Global dashboard settings which are applied to all components in a dashboard

![Screenshot](../img/style/dashboardsettings.jpg)

Global Change Overwrite

Changes made using the global Style menu of dashboards will overwrite any
individual changes at the component level.

_Dashboard Theme_

    Light or Dark
_Widgets Spacing_

    Margin in pixels around each component 
_Widget Shadow_

    When checked, applies a drop shadow to each component 
_Background Color_

    Defines background color of all widgets in the workspace unless overwritten by widget own style.
_Transparent Background_

    If the property is checked, the Background Color property is ignored and set to transparent.
_Border Size_ , _Border Color_ , _Border Rounding_ and _Border Spacing_

    Defines the border applied to components. To apply a border, set _Border Size_ to a value greater than 1. _Border Spacing_ sets the distance between the border and the inner component. 
_Worksheet Padding_

    Padding in pixels around each component
_Show Loading Indicators_

    When dashboard sends a request for data, a spiral "loading" indicator appears on screen until data is uploaded. 
    

Show Loading Indicators

If your dashboard uses streaming, managed or polling data, uncheck

_Show Loading Indicators_

.

### Logo

![Screenshot](../img/style/logoadd.jpg)

A simple image logo can be added to a dashboard using a [Text
Input](../textinput/) component.

  1. Drag the Text Input component into the dashboard, then select it. 

![Screenshot](../img/style/dragtextlogohtmllight.jpg)

  2. Click inside the _Formatted Text_ box of the _Basics_ properties to open the editor. 

![Screenshot](../img/style/formattedtexthtmllight.jpg)

  3. Use the menu bar to add an image. 

![Screenshot](../img/style/texteditorhtmllight.jpg)

Ensure your logo image uses a transparent background – to be compatible with
the background of the dashboard.

![Screenshot](../img/style/kxlogoimage.jpg)

  4. Set the height and width of the logo in pixels. 

![Screenshot](../img/style/uploadimage.jpg)

50 pixels is a good height for a logo. The importer will re-scale the logo
maintaining its aspect ratio if only the image height is set.

  5. Delete the default `insert text here` before adding the logo.

  6. If your logo is positioned to the left of the dashboard, change the _Horizontal_ alignment to _Left_. (Vice versa for right-positioned logos.) 

![Screenshot](../img/style/alignlogohtmllight.jpg)

  7. Prevent the appearance of unnecessary scroll bars around the logo on browser resize: update _Advanced CSS_ from the _Style_ menu. 

![Screenshot](../img/style/advancedcssleftclickhtmllight.jpg)

     * Click the CSS icon to activate the selector. 

![Screenshot](../img/style/clickadvancedcssiconhtmllight.jpg)

     * Roll over the component until the `div.htmlContent` box is selected: 

![Screenshot](../img/style/divhtmlcontenthtmllight.jpg)

     * Amend the CSS to hide scroll bars: set the `overflow` property to `hidden`. (Remember to add the CSS inside the `{}` brackets.) 

![Screenshot](../img/style/overflowhtmllight.jpg)

![Screenshot](../img/style/advancedcssstyle.jpg)

Tip

If dashboard styling is used to align and position components, remember to
update the _Margins_ setting of the Text Input component to undo any
unnecessary changes to the position of the logo.

## Component style

Some style settings common to many components

### Title

Controls title positioning relative to the component pane and outer border

Sample title settings | Results  
---|---  
![Screenshot](../img/style/title66207htmllight.jpg) | ![Screenshot](../img/style/titleimage66207.jpg)  
![Screenshot](../img/style/title66620.jpg) | ![Screenshot](../img/style/titleimage66620.jpg)  
![Screenshot](../img/style/title50666htmllight.jpg) | ![Screenshot](../img/style/titleimage50666htmllight.jpg)  
  
Adjusting _Title Left_ and _Title Right_ will add margin even if the title is
center-aligned by _Title Horizontal Align_ in the _Format_ dialog.

### Margins

Outer margins

    

Spacing in pixels outside of component and component border

Inner margins

    Spacing in pixels between the rectangular component area and any utilized border.

Tip

In the absence of a defined border, changes between inner and outer margins
will appear similar.

Added widget spacing is the equivalent of outer margins in the _Margins_ menu
of a component

![Screenshot](../img/style/outermarginhtmllight.jpg)

_Border Spacing_ sets the spacing between the elements of the component and
the border.

![Screenshot](../img/style/borderspacinghtmllight.jpg)

_Border Spacing_ is the the equivalent of inner margins in the _Margins_ menu
of a component.

![Screenshot](../img/style/innermarginhtmllight.jpg)

Rounding of borders is possible only if _Border Size_ has a value greater than
1. Use of more rounded borders requires increased border spacing to avoiding
edge cutting of the border.

Dashboard and component margins

Dashboard margin settings override component margin settings. When styling
dashboards, set margins at the dashboard level before setting them for
individual components.

### Format

![Screenshot](../img/style/formatmenu.jpg)

_Title_

    ![Screenshot](../img/style/datagridtitlehtmllight.jpg)
_Title Font Size_

    In pixels
_Title Font Color_

    

Click on the color bar to bring up the palette menu

![Screenshot](../img/style/palettemenuhtmllight.jpg)

_Title Bold_

    ![Screenshot](../img/style/boldfontcolorhtmllight.jpg)
_Title Shadow_

    When checked, applies shadow to the title
_Title Horizontal Align_

    Horizontal position of the title within component 
_Title Bottom Border Size_

    

Pixel distance between the title and the component content

![Screenshot](../img/style/titlebordersizehtmllight.jpg)

Border and background color

    

_Component Color_ is the color of the component’s border and title background
when _Transparent Background_ is unchecked

![Screenshot](../img/style/componentcolorhtmllight.jpg)

![Screenshot](../img/style/componentcolorhtmllight2.jpg)

_Border Size_ , _Rounding_ and _Color_

    

These three parameters control the borders of a component:

![Screenshot](../img/style/bordercolorsettinghtmllight.jpg)

![Screenshot](../img/style/bordersettinghtmllight.jpg)

Inner margins

Adjust _Inner Top_ and _Inner Bottom_ margins if necessary to avoid the
rectangular box of the component cutting into a rounded border.

_Component Shadow_

    ![Screenshot](../img/style/componentshadowhtmllight.jpg) _A Bar Chart with a component shadow_

### Palette Theme

[Palette Theme](../palette/#palette-theme)

### Palettes

[Palettes](../palette/#palettes)

### Advanced CSS

Click inside the Advanced CSS editor. Click the selector icon, then inside the
chart component to edit CSS rules.

  1. Click inside the Advanced CSS editor

![Screenshot](../img/style/advancedcssleftclickhtmllight.jpg)

  2. Click the Element selector. 

![Screenshot](../img/style/clickadvancedcssiconhtmllight.jpg)

  3. Use the selector to point at the area of the component to change. The editor will automatically detect and assign the relevant widget ID and reference CSS - all that’s needed is the custom content, e.g. color, background-color etc. 

![Screenshot](../img/style/identifycss.jpg)

![Screenshot](../img/style/csssamplecode.jpg)

  4. Apply the changes

Finding the Widget ID

Any Advanced CSS component can be used to define the CSS for any component in
a dashboard, all that's required is the correct Widget ID. Use Chrome
Developer Tools, Elements Inspector to source the Widget ID. Select an element
with the Developer Tool pointer directing it on the component in the
Dashboard. This will focus the Elements content on the component HTML.
Associated CSS will be displayed in the right column and widget ID in the main
pane. ![Screenshot](../img/style/findwidgetid.jpg)

### Customizing Error Messages

Error messages defined by `cssClass:"..":` can be styled in the [Advanced CSS
editor](./#advanced-css); for example:

    
    
    '"cssClass:\"criticalError\":Invalid parameter!"
    

would use the CSS format

    
    
    [data-widgetid="widgetIdGuid"] .criticalError .statusText {
        font-size: 60px;
        color: red !important;
    }
    

in the Advanced CSS editor.

### CSS classes

CSS classes can be used to style components. CSS classes can be created
directly or assigned to a [view state parameter](../viewstateparameters/).

![Screenshot](../img/style/cssclass.jpg)

[Read more](https://www.w3schools.com/cssref/sel_class.asp)

[Custom tooltips](../template/#custom-tooltip)

