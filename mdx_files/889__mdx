https://code.kx.com/developer/libraries/repository-exporter/

# Repository export - KX Developer

Original URL: https://code.kx.com/developer/libraries/repository-exporter/

# Repository export

## .axrepo.DEFAULTS

Default values for command line opts

## .axrepo.MANIFEST

Columns to save when using 'saveManifest'

## .axrepo.SAVE

Columns to save when using 'saveArtifacts'

## .axrepo.artifactInfo

Converts the modules found in the kxscm directory to an in-memory artifact
table without reading the content

**Parameter:**

Name | Type | Description  
---|---|---  
repoRoot | symbol | Directory where repository is  
  
**Returns:**

Name | Type | Description  
---|---|---  
<returns> | table | Artifacts w/o content  
<returns>.name | symbol |   
<returns>.scmName | symbol |   
<returns>.objType | symbol |   
<returns>.moduleName | symbol |   
<returns>.repoName | symbol |   
<returns>.src | symbol |   
  
**See Also:** [ .axrepo.artifacts ](./#axrepoartifacts)

## .axrepo.artifacts

Given artifact info, read the content and cast it

**Parameters:**

Name | Type | Description  
---|---|---  
items | table |   
items.src | symbol |   
items.kind | symbol |   
items.name | symbol |   
  
**Returns:**

Name | Type | Description  
---|---|---  
<returns> | table |   
<returns>.content | any |   
  
## .axrepo.cli

Command line interface for AxRepo

**Parameter:**

**Returns:**

Type | Description  
---|---  
null | Does not return, exits  
  
## .axrepo.dependency

Return artifacts who are depended on by modules

**Parameters:**

Name | Type | Description  
---|---|---  
topLevelModules | symbol[] |   
maxdepth | long | Max depth to cut off at  
artifacts | table |   
artifacts.objType | symbol |   
artifacts.content | char[] |   
artifacts.name | symbol |   
artifacts.moduleName | symbol |   
  
**Returns:**

## .axrepo.export

Exports all modules found recursively

**Parameter:**

Name | Type | Description  
---|---|---  
options | [ .axrepo.options ](../overview-typedefs/#axrepooptions) | Where to read and write from/into  
  
**Returns:**

## .axrepo.exportSingle

Exports all modules found recursively into a single script

**Parameter:**

Name | Type | Description  
---|---|---  
options | [ .axrepo.options ](../overview-typedefs/#axrepooptions) | Where to read and write from/into  
  
**Returns:**

## .axrepo.exporterNaming

Titles files to match the expectations of .axexport.

The name column of .axexport is different than how name is used in the
workspace

For most artifacts: name is the relative name

However for file artifacts: name gets set to their qualified name _without_
the module directory

.e.g kxscm/module/foo/file/folderA/fileA -> folderA/fileA .e.g src/hello/world
-> src/hello/world

**Parameter:**

Name | Type | Description  
---|---|---  
x | table |   
  
**Returns:**

## .axrepo.filter.allowlist

Delete all `file type artifacts, except those in -allowlist

**Parameters:**

Name | Type | Description  
---|---|---  
x | table |   
x.kind | symbol |   
x.content | char[] |   
x.name | symbol |   
x.module | symbol |   
  
**Returns:**

Type | Description  
---|---  
table | must return its input  
  
## .axrepo.filter.default

Default filter

**Parameters:**

Name | Type | Description  
---|---|---  
x | table |   
x.kind | symbol |   
x.content | char[] |   
x.name | symbol |   
x.module | symbol |   
  
**Returns:**

Type | Description  
---|---  
table | must return its input  
  
## .axrepo.findArtifactsDat

Find artifacts.dat

**Parameter:**

**Returns:**

Type | Description  
---|---  
symbol[] |   
  
## .axrepo.hook.AXDEFINES

Add AXDEFINES to the head of modular scripts

**Parameters:**

Name | Type | Description  
---|---|---  
x | table |   
x.kind | symbol |   
x.content | char[] |   
x.name | symbol |   
x.module | symbol |   
  
**Returns:**

Name | Type | Description  
---|---|---  
<returns> | dict |   
<returns>.header | string |   
<returns>.footer | string |   
  
## .axrepo.hook.default

Do nothing

**Parameters:**

Name | Type | Description  
---|---|---  
x | table |   
x.kind | symbol |   
x.content | char[] |   
x.name | symbol |   
x.module | symbol |   
  
**Returns:**

Name | Type | Description  
---|---|---  
<returns> | dict |   
<returns>.header | string |   
<returns>.footer | string |   
  
## .axrepo.inject

Inject code into scripts using hook

**Parameter:**

Name | Type | Description  
---|---|---  
options | [ .axrepo.options ](../overview-typedefs/#axrepooptions) | Where to read and write from/into  
  
**Returns:**

## .axrepo.print

Print file names that would be generated by export

**Parameter:**

Name | Type | Description  
---|---|---  
options | [ .axrepo.options ](../overview-typedefs/#axrepooptions) | Where to read and write from/into  
  
**Returns:**

## .axrepo.private

Retitle publiccolumns to workspace API

**Parameter:**

Name | Type | Description  
---|---|---  
x | table |   
  
**Returns:**

## .axrepo.public

Retitle workspace columns to public API

**Parameter:**

Name | Type | Description  
---|---|---  
x | table |   
  
**Returns:**

## .axrepo.read

Read from disk, and return as artifacts (without content)

**Parameter:**

Name | Type | Description  
---|---|---  
options | dict |   
  
**Returns:**

## .axrepo.saveArtifacts

Write artifacts to disk as a simple table

**Parameter:**

Name | Type | Description  
---|---|---  
options | [ .axrepo.options ](../overview-typedefs/#axrepooptions) | Where to read and write from/into  
  
**Returns:**

## .axrepo.saveManifest

Save manifest.dat

**Parameter:**

**Returns:**

## .axrepo.source

Get artifacts from artifacts.dat(s) or repositories

**Parameter:**

**Returns:**

