https://code.kx.com/platform/stream/alerts/

# Alerts - KX Delta Platform

Original URL: https://code.kx.com/platform/stream/alerts/

# Alerts

Deprecation

Modern browsers no longer support Flash applications. As of KX Delta Platform
v4.6.0 alerts should be configured using ControlUI.

The _KX Stream_ alert framework provides a mechanism to generate alerts based
on the data flowing through the system. An alert is a message, which is
published into the system and can be used to generate another event, such as
triggering an email. The main benefit of the alert framework is that it
provides the tools required to generate alerts on streaming data, thereby
making it easier for inexperienced programmers.

Alert Definition

    A parameterized analytic which fits a specific format, and a definition of how the corresponding alert is packaged and distributed. An alert analytic builder is also provided.
Alert Instance

    An alert definition with a set of parameters and actions specified. Emails can be generated from alert instances, and the alert content distributed within the email.

The same alert can be run on multiple processes, with all or only one of the
processes generating the alert. Alerts are managed through the
_DS_AlertOverview_ dashboard.

![Screenshot](../img/stream/alertoverview.png)

This dashboard allows you to define alert criteria and alert instances as well
as actions to be taken when alerts are triggered. You can also suspend emails
generated by certain alerts and view logs of alert activity.

The dashboard is divided into six tabs: the _Alerts Editor_ , the _Alert
Instance Editor_ , the _Actions Editor_ , _Email Suspension_ , and _Logs_.

## Alerts editor

Define alerts and the conditions that trigger them. It has two panels.

### Alert definition

_Alert Name_

    (required) A pre-defined alert
_Description_

    Text description of the alert
_Trigger Table_

    (required) Name of the table the alert reacts to. Updates to this table may trigger an alert, according to the trigger conditions you set. For example, to monitor bid and ask prices you might select a quote table. Once the process has been set within the Alert Instance, a dropdown list of all tables available on that process will be shown. The Lookup Data table allows you to view sample data for the Lookup Table.
_Lookup Table_

    An additional table to which the alert can react: can be either a schema from the process or a configuration parameter from _KX Control_ ; must have at least one column in common with the trigger table
_Lookup Data_

    Displays data in the Lookup Table
_Columns_

    (required) Columns from the Trigger and Lookup Tables to be used in the alert; checking _Publish_ means data from the column will be published with the alert to the data column in `dxAlert`. (You must publish at least one column.)
    ![Screenshot](../img/stream/advancedcolumnoptions.png)
    

The _Advanced_ button displays additional flags:

_Match_

    Use column to join the alert data with the Lookup Table. (Must be present in both tables.)
_Alert Key_

    Use column to create a unique identifier for the alert. (Default is a sym or symbol column, if present.)
_Tag 1/Tag 2_

    Use column to enrich data in the `dxAlert` table, e.g. for `CPU Usage` set `tag1` as `logicalName` and `tag2` as `breachLevel`, making `dxAlert` a clearer view of the error
_Alert Type_

    

When the alert should be raised:

  * `All`: every time an alert is triggered
  * `On State Change`: when an alert is triggered and only when it changes state
  * `On True State Change`: when alert is triggered and when the state changes to `true`

_Post Alert Analytic_

    An analytic called after an alert is generated but before it is published: selected from the `DxPostAlertAnalytics` analytic group. The analytic takes the generated alert as its argument and returns data in the same format. Allows you to define behavior such as adding information to the alert payload or changing the value of certain fields.

### Alert trigger

The right-hand panel of th!e _Alerts Editor_ tab displays the conditions in
which an alert will be triggered.

![Screenshot](../img/stream/alertriggers.png)

_Trigger Message_

    The message to be displayed when the alert is generated
_Available Tags_

    The trigger message can include tagged data, as selected from the _Available Tags_ list
_Editor_

    Set to _Analytic_ to have alerts generated based on the true/false outcome of a pre-defined Analytics within the _KX Delta Platform_. A _Query Builder_ option is also available for basic checks on incoming data against conditional statements
_Analytic_

    (read only) Analytics associated with the alert group `DxAlertAnalytics`, used to define the trigger condition for an alert. (Pre-defined in _KX Control_.)
_Report Description_

    (read only) A description of the report
_Report Parameters_

    (read only) Parameters vary according to the analytic selected. These cannot be modified in the Alert Editor, only within the Alert Instance Editor.

### Set alert permissions

  1. Open the _Alerts Editor_ and select an alert.

  2. Select the _Permissions_ tab. 

![Screenshot](../img/stream/permissionstab.png)

  3. On the left-hand side of the screen select either a user or a user group and drag it to the right-hand side. 

  4. On the left-hand side of the screen select a user or group and set its _Access Level_ : 

     * `Deny All` â€“ deny all access
     * `Read/Deny Write` â€“ grants Read access, overrides any inherited Write permissions
     * `Read` \- grants Read access, which can be overridden by explicit inherited `Deny All` permission
     * `Read/Write` \- grants Read and Write access, but can be overridden by explicit inherited `Deny All` permission
  5. Check _Inherited_ to indicate a user inherits her permissions from her group.

  6. Click _X_ to remove a permission from any user or group.

Delete or duplicate an alert

To delete an alert: open the _Alerts Editor_ , select an alert and click
_Delete_.

To duplicate an alert: open the _Alerts Editor_ , select an alert and click
_Duplicate_.

## Alert instance editor

The _Alert Instance Editor_ tab allows you to create instances of alerts. Each
instance of an alert can be configured differently.

![Screenshot](../img/stream/alertinstanceeditor.png)

The tab has two panels.

Select an alert in the _Alert Instance Management_ panel and click

  * _View/Edit_ to browse its details in the _Alert Instance Details_ panel below; or
  * _Delete_ to delete it.

Or click _New Alert Instance_ to clear the _Alert Instance Details_ panel for
a new alert definition.

The _Alert Instance Details_ panel:

control | effect  
---|---  
Alert Instance Name | A unique name for the instance  
Alert | The alert this instance will be based on  
Process | The process in which the alert is registered: must be running and must support alerts  
Lookup Override | A table or configurable parameter used for comparing data. These must have at least one column in common with the trigger table so that they can successfully be joined in the alert. If specified, overrides the _Lookup Table_ of the _Alert_.  
Lookup Data | Displays data of the _Lookup Override_  
![Screenshot](../img/stream/lookupdatadisplay.png)  
Active | Check to activate the alert  
Persist | Check the alert is to be persisted to _KX Control_ for loading into the process each time it is started; otherwise the alert will expire when the process terminates  
Max Frequency | The maximum frequency that an alert can be raised; if checked specify the frequency in terms of 1/x seconds  
![Screenshot](../img/stream/maxfrequency.png)  
Notifications | A table of notifications for this alert.  
Actions Editor  
  
Once you have created a new alert instance you can specify the user
permissions for the alert instance.

## Actions editor

Set up email notifications to be sent when alerts are triggered. Associate a
notification with an alert instance and specify the frequency and recipients.

![Screenshot](../img/stream/actionseditor.png)

_Notification_

    Select a notification from the drop-down list of existing notifications. Or click _New_ and create a new notification. Or select a notification from the list and click _Delete_ to remove it.
_Alert Instance Name_

    The name of the alert instance to associate the notification with.
_Update Type_

    

When to send the notification:

  * `On True` â€“ whenever `triggered = true`
  * `On False` â€“ whenever `triggered = false`
  * `On First True` â€“ the first time `triggered = true`
  * `On First False` â€“ the first time `triggered = false`
  * `On Change` â€“ when the value of `triggered` changes
  * `On All` â€“ every time, regardless of the value of `triggered`

_Time Since Last_

    The delay from when an email notification is sent until the next notification is sent.
_Email Template_

    The _New_ and _Edit_ buttons summon the Email Editor. Specify the subject and content of the email. Drag data from the _Data Tags_ list to include it in the subject or content.
    ![Screenshot](../img/stream/emaileditor.png)  
_Editing an email template_

_Recipients_

    A table of email contacts: check _Include_ for the notifications to be sent to a recipient.

## Email suspension

Set up periods when email notifications are temporarily suspended.

Simply select the notification you want to suspend and enter a start/end date
and time (hh![ðŸ‡²ðŸ‡²](https://twemoji.maxcdn.com/v/latest/svg/1f1f2-1f1f2.svg)ss)
for the suspension; click _Add New_.

Multiple suspension periods can be set for each notification.

![Screenshot](../img/stream/emailsuspensions.png)

Select any suspension and click _Delete_ to remove it.

## Logs

Inspect the events that triggered an alert.

Filter the logs by notifications, alerts and date/time range. Click _View_ to
apply your filters.

## Triggering alerts

All processes launched from _KX Control_ support alerts by default. After
setting up an alert on a process, as described above, the alert will remain in
the process, but (by default) it might not be triggered.

To trigger alerts, the process code must call an alert-generator API function
(`.ag.upd`) with the following two arguments:

  * the trigger table name as a symbol
  * a table of data corresponding to the trigger schema

Some of the analytics provided by _KX Stream_ support this by default, e.g.
`dxUpdInsertPub`:

    
    
    {[tabName;data]
      upsert[tabName;data];
      .ds.rte.executeUpdCallBacks[tabName;data];
      .ag.upd[tabName;data];
      }
    

